# Obfuscated with PyObfuscate
# https://www.github.com/aoun977
# Coded and encrypted by Aoun Muhammad
# Never try to decompile. It may harm your device.
# Time : Wed Jun  7 14:56:51 2023
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))
